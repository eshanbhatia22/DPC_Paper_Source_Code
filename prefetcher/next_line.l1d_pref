#include "cache.h"
#define PAGES_TRACKED 6

void CACHE::l1d_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " L1D next line prefetcher" << endl;
}
	
uint64_t page_tracker[PAGES_TRACKED];

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{

	uint64_t page = addr >> LOG2_PAGE_SIZE; 
	for (int i = PAGES_TRACKED-1; i>0; i--) { // N down to 1
		page_tracker[i] = page_tracker[i-1];
	}
	page_tracker[0] = page;

	int distinct_pages = 0;
	for (int i=0; i < PAGES_TRACKED; i++) {
		int j;
		for (j=0; j<i; j++) {
			if (page_tracker[i] == page_tracker[j])
				break;
		}
		if (i==j)
			distinct_pages++;
	}

	uint32_t value = 2;
    uint64_t pf_addr = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;
    prefetch_line(ip, addr, pf_addr, FILL_L1, value);

    DP ( if (warmup_complete[cpu]) {
    cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr>>LOG2_BLOCK_SIZE);
    cout << " pf_cl: " << (pf_addr>>LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit << " type: " << +type << endl; });
	//cout << current_core_cycle[cpu] << "\tL1D_OPER: At Addr: " << (addr>>LOG2_BLOCK_SIZE) << "\tCache Hit: " << +cache_hit << "\tNo Incoming Metadata" << endl;
	//cout << current_core_cycle[cpu] << "\tL1D_OPER: Initiate Prefetch of Addr: " << (pf_addr>>LOG2_BLOCK_SIZE) << "\twith Metadata: " << value  << endl;
   
	for (int i = 1; i < ceil(PQ.SIZE / distinct_pages); i++) {
		pf_addr = ((pf_addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;
    	prefetch_line(ip, addr, pf_addr, FILL_L1, value);
	}
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
	//cout << current_core_cycle[cpu] << "\tL1D_FILL: At Addr: " << (addr>>LOG2_BLOCK_SIZE) << "\tIncoming Metadata: " << metadata_in << endl;

}

void CACHE::l1d_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L1D next line prefetcher final stats" << endl;
}
